;利用汇编显示Hello,world!!!
;hello-os
;TAB=4

		ORG	0x7c00				; 将程序装载到0x7c00处

;FAT12格式软盘专用代码，软盘大小为1440KB
		JMP entry
		DB 0x90
		DB 0xeb,0x4e,0x90	
		DB "MyOS IPL"			;启动区的名字，8字节
		DW 512					;每个扇区大小
		DB 1					;1个簇围1个扇区
		DW 1					;FAT文件配置表的起始位置
		DB 2					;FAT个数 2
		DW 224					;根目录大小 224
		DW 2880	 				;该磁盘大小 2880*512B=1440KB
		DB 0xf0					;磁盘种类
		DW 9					;FAT长度 9扇区
		DW 18 					;1个磁道18个扇区
		DW 2					;2个磁头
		DD 0					;不使用分区
		DD 2880					;同上，磁盘大小
		DB 0,0,0x29
		DD 0xffffffff
		DB "MyOS       "		;磁盘名，11字节
		DB "FAT12   "			;磁盘格式名，8字节
		RESB 18					;空出18个字节，自动填充18个0x00

		;直接向下运行
; 程序核心
entry:
;初始化各寄存器
		;16位处理器8个寄存器
		;AX 累加寄存器	BX 基址寄存器  CX 计数寄存器  DX 数据寄存器
		;SP 栈指针寄存器  BP 基址指针寄存器  SI 源变址寄存器  DI 目的变址寄存器
		;32位处理器使用EAX~EDI
		MOV	AX,0			
		MOV	SS,AX				;栈段寄存器	
		MOV	SP,0x7c00		
		MOV	DS,AX
		MOV	ES,AX

		MOV	SI,msg				;将msg（地址）复制给SI寄存器
putloop:
		MOV	AL,[SI]				;[x]表示内存中地址为x的单元，将SI地址中一个字节赋值给AL（AX的低位）
		ADD	SI,1				;SI自增
		CMP	AL,0				;对比AL是否为0
		JE fin					;是则转入fin
		;调用中断显示字符串
		;AH=0x0e AL=字符编码 BH=0 BL=字符颜色
		MOV	AH,0x0e			
		MOV	BX,15			
		INT	0x10				;调用中断显示文字
		JMP putloop
		

;等待
fin:
		HLT						; 等待外部动作，如鼠标或者键盘事件
		JMP fin					

msg:
		DB 0x0a,0x0a,0x0a		;3次换行
		DB "Hello,world!!!"
		DB 0x0a					;换行
		DB 0

		TIMES	0x510-($-$$) DB 0		;剩余全部填0 (7c00+1de)

		DB		0x55, 0xaa

; 启动区以外的输出

		DB		0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
		RESB	4600
		DB		0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
		RESB	1469432
